// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { LoginApiV1AuthLoginPostData, LoginApiV1AuthLoginPostResponse, RegisterApiV1AuthRegisterPostData, RegisterApiV1AuthRegisterPostResponse, GetCurrentUserInfoApiV1AuthMeGetResponse, GetAllConnectionsApiV1ConnectionsGetResponse, CreateConnectionApiV1ConnectionsPostData, CreateConnectionApiV1ConnectionsPostResponse, GetConnectionApiV1ConnectionsConnectionIdGetData, GetConnectionApiV1ConnectionsConnectionIdGetResponse, UpdateConnectionApiV1ConnectionsConnectionIdPutData, UpdateConnectionApiV1ConnectionsConnectionIdPutResponse, DeleteConnectionApiV1ConnectionsConnectionIdDeleteData, DeleteConnectionApiV1ConnectionsConnectionIdDeleteResponse, TestConnectionApiV1ConnectionsTestPostData, TestConnectionApiV1ConnectionsTestPostResponse, GetDashboardStatsApiV1DashboardGetResponse, RootGetResponse, HealthHealthGetResponse, IntrospectDatabaseApiV1IntrospectionPostData, IntrospectDatabaseApiV1IntrospectionPostResponse, GetTablesByConnectionApiV1IntrospectionConnectionsConnectionIdTablesGetData, GetTablesByConnectionApiV1IntrospectionConnectionsConnectionIdTablesGetResponse, GetTableApiV1IntrospectionTablesTableIdGetData, GetTableApiV1IntrospectionTablesTableIdGetResponse, GetRelationsByConnectionApiV1IntrospectionConnectionsConnectionIdRelationsGetData, GetRelationsByConnectionApiV1IntrospectionConnectionsConnectionIdRelationsGetResponse, RefreshMetadataApiV1IntrospectionConnectionsConnectionIdRefreshPostData, RefreshMetadataApiV1IntrospectionConnectionsConnectionIdRefreshPostResponse, DeleteMetadataApiV1IntrospectionConnectionsConnectionIdMetadataDeleteData, DeleteMetadataApiV1IntrospectionConnectionsConnectionIdMetadataDeleteResponse, ExecuteQueryApiV1QueryExecutePostData, ExecuteQueryApiV1QueryExecutePostResponse, GetUsersApiV1UsersGetData, GetUsersApiV1UsersGetResponse, CreateUserApiV1UsersPostData, CreateUserApiV1UsersPostResponse, GetUserApiV1UsersUserIdGetData, GetUserApiV1UsersUserIdGetResponse, UpdateUserApiV1UsersUserIdPutData, UpdateUserApiV1UsersUserIdPutResponse, DeleteUserApiV1UsersUserIdDeleteData, DeleteUserApiV1UsersUserIdDeleteResponse } from './types.gen';

export class AuthenticationService {
    /**
     * Login
     * Login endpoint - returns JWT token.
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginApiV1AuthLoginPost(data: LoginApiV1AuthLoginPostData): CancelablePromise<LoginApiV1AuthLoginPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/login',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register
     * Register a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserResponse Successful Response
     * @throws ApiError
     */
    public static registerApiV1AuthRegisterPost(data: RegisterApiV1AuthRegisterPostData): CancelablePromise<RegisterApiV1AuthRegisterPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/register',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Current User Info
     * Get current user information.
     * @returns UserResponse Successful Response
     * @throws ApiError
     */
    public static getCurrentUserInfoApiV1AuthMeGet(): CancelablePromise<GetCurrentUserInfoApiV1AuthMeGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/auth/me'
        });
    }
}

export class ConnectionsService {
    /**
     * Get All Connections
     * Get all database connections.
     * @returns ConnectionResponse Successful Response
     * @throws ApiError
     */
    public static getAllConnectionsApiV1ConnectionsGet(): CancelablePromise<GetAllConnectionsApiV1ConnectionsGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/connections'
        });
    }
    
    /**
     * Create Connection
     * Create a new database connection.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ConnectionResponse Successful Response
     * @throws ApiError
     */
    public static createConnectionApiV1ConnectionsPost(data: CreateConnectionApiV1ConnectionsPostData): CancelablePromise<CreateConnectionApiV1ConnectionsPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/connections',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Connection
     * Get a connection by ID.
     * @param data The data for the request.
     * @param data.connectionId
     * @returns ConnectionResponse Successful Response
     * @throws ApiError
     */
    public static getConnectionApiV1ConnectionsConnectionIdGet(data: GetConnectionApiV1ConnectionsConnectionIdGetData): CancelablePromise<GetConnectionApiV1ConnectionsConnectionIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/connections/{connection_id}',
            path: {
                connection_id: data.connectionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Connection
     * Update an existing connection.
     * @param data The data for the request.
     * @param data.connectionId
     * @param data.requestBody
     * @returns ConnectionResponse Successful Response
     * @throws ApiError
     */
    public static updateConnectionApiV1ConnectionsConnectionIdPut(data: UpdateConnectionApiV1ConnectionsConnectionIdPutData): CancelablePromise<UpdateConnectionApiV1ConnectionsConnectionIdPutResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/connections/{connection_id}',
            path: {
                connection_id: data.connectionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Connection
     * Delete a connection and all its metadata.
     * @param data The data for the request.
     * @param data.connectionId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteConnectionApiV1ConnectionsConnectionIdDelete(data: DeleteConnectionApiV1ConnectionsConnectionIdDeleteData): CancelablePromise<DeleteConnectionApiV1ConnectionsConnectionIdDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/connections/{connection_id}',
            path: {
                connection_id: data.connectionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Connection
     * Test a database connection without saving it.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ConnectionTestResponse Successful Response
     * @throws ApiError
     */
    public static testConnectionApiV1ConnectionsTestPost(data: TestConnectionApiV1ConnectionsTestPostData): CancelablePromise<TestConnectionApiV1ConnectionsTestPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/connections/test',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class DashboardService {
    /**
     * Get Dashboard Stats
     * Get dashboard statistics and recent connections.
     * @returns DashboardResponse Successful Response
     * @throws ApiError
     */
    public static getDashboardStatsApiV1DashboardGet(): CancelablePromise<GetDashboardStatsApiV1DashboardGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/dashboard'
        });
    }
}

export class DefaultService {
    /**
     * Root
     * Root endpoint.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static rootGet(): CancelablePromise<RootGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/'
        });
    }
    
    /**
     * Health
     * Health check endpoint.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static healthHealthGet(): CancelablePromise<HealthHealthGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/health'
        });
    }
}

export class IntrospectionService {
    /**
     * Introspect Database
     * Introspect a database and save discovered metadata.
     * This replaces any existing metadata for the connection.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns IntrospectionResponse Successful Response
     * @throws ApiError
     */
    public static introspectDatabaseApiV1IntrospectionPost(data: IntrospectDatabaseApiV1IntrospectionPostData): CancelablePromise<IntrospectDatabaseApiV1IntrospectionPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/introspection',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Tables By Connection
     * Get all discovered tables for a connection.
     * @param data The data for the request.
     * @param data.connectionId
     * @returns DiscoveredTableResponse Successful Response
     * @throws ApiError
     */
    public static getTablesByConnectionApiV1IntrospectionConnectionsConnectionIdTablesGet(data: GetTablesByConnectionApiV1IntrospectionConnectionsConnectionIdTablesGetData): CancelablePromise<GetTablesByConnectionApiV1IntrospectionConnectionsConnectionIdTablesGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/introspection/connections/{connection_id}/tables',
            path: {
                connection_id: data.connectionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Table
     * Get a specific discovered table by ID.
     * @param data The data for the request.
     * @param data.tableId
     * @returns DiscoveredTableResponse Successful Response
     * @throws ApiError
     */
    public static getTableApiV1IntrospectionTablesTableIdGet(data: GetTableApiV1IntrospectionTablesTableIdGetData): CancelablePromise<GetTableApiV1IntrospectionTablesTableIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/introspection/tables/{table_id}',
            path: {
                table_id: data.tableId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Relations By Connection
     * Get all discovered relations for a connection.
     * @param data The data for the request.
     * @param data.connectionId
     * @returns DiscoveredRelationResponse Successful Response
     * @throws ApiError
     */
    public static getRelationsByConnectionApiV1IntrospectionConnectionsConnectionIdRelationsGet(data: GetRelationsByConnectionApiV1IntrospectionConnectionsConnectionIdRelationsGetData): CancelablePromise<GetRelationsByConnectionApiV1IntrospectionConnectionsConnectionIdRelationsGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/introspection/connections/{connection_id}/relations',
            path: {
                connection_id: data.connectionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Refresh Metadata
     * Refresh metadata for a connection by re-introspecting the database.
     * This replaces all existing metadata.
     * @param data The data for the request.
     * @param data.connectionId
     * @returns IntrospectionResponse Successful Response
     * @throws ApiError
     */
    public static refreshMetadataApiV1IntrospectionConnectionsConnectionIdRefreshPost(data: RefreshMetadataApiV1IntrospectionConnectionsConnectionIdRefreshPostData): CancelablePromise<RefreshMetadataApiV1IntrospectionConnectionsConnectionIdRefreshPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/introspection/connections/{connection_id}/refresh',
            path: {
                connection_id: data.connectionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Metadata
     * Delete all metadata for a connection.
     * @param data The data for the request.
     * @param data.connectionId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteMetadataApiV1IntrospectionConnectionsConnectionIdMetadataDelete(data: DeleteMetadataApiV1IntrospectionConnectionsConnectionIdMetadataDeleteData): CancelablePromise<DeleteMetadataApiV1IntrospectionConnectionsConnectionIdMetadataDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/introspection/connections/{connection_id}/metadata',
            path: {
                connection_id: data.connectionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class QueryService {
    /**
     * Execute Query
     * Execute a SQL query on a specified database connection.
     * Returns results with column names and rows.
     * Limited to SELECT queries for safety.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ExecuteQueryResponse Successful Response
     * @throws ApiError
     */
    public static executeQueryApiV1QueryExecutePost(data: ExecuteQueryApiV1QueryExecutePostData): CancelablePromise<ExecuteQueryApiV1QueryExecutePostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/query/execute',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class UsersService {
    /**
     * Get Users
     * Get all users (superuser only).
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersListResponse Successful Response
     * @throws ApiError
     */
    public static getUsersApiV1UsersGet(data: GetUsersApiV1UsersGetData = {}): CancelablePromise<GetUsersApiV1UsersGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create a new user (superuser only).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserResponse Successful Response
     * @throws ApiError
     */
    public static createUserApiV1UsersPost(data: CreateUserApiV1UsersPostData): CancelablePromise<CreateUserApiV1UsersPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get User
     * Get a specific user.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserResponse Successful Response
     * @throws ApiError
     */
    public static getUserApiV1UsersUserIdGet(data: GetUserApiV1UsersUserIdGetData): CancelablePromise<GetUserApiV1UsersUserIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserResponse Successful Response
     * @throws ApiError
     */
    public static updateUserApiV1UsersUserIdPut(data: UpdateUserApiV1UsersUserIdPutData): CancelablePromise<UpdateUserApiV1UsersUserIdPutResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user (superuser only).
     * @param data The data for the request.
     * @param data.userId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteUserApiV1UsersUserIdDelete(data: DeleteUserApiV1UsersUserIdDeleteData): CancelablePromise<DeleteUserApiV1UsersUserIdDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}