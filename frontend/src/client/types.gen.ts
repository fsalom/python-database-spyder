// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_api_v1_auth_login_post = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

/**
 * Schema for creating a new connection.
 */
export type ConnectionCreate = {
    name: string;
    database_type: DatabaseType;
    host: string;
    port: number;
    database: string;
    username: string;
    password: string;
    db_schema?: (string | null);
    ssl_enabled?: boolean;
};

/**
 * Schema for connection response.
 */
export type ConnectionResponse = {
    id: number;
    name: string;
    database_type: DatabaseType;
    host: string;
    port: number;
    database: string;
    username: string;
    db_schema?: (string | null);
    ssl_enabled: boolean;
    status: ConnectionStatus;
    last_introspection?: (string | null);
    created_at: string;
    updated_at: string;
};

/**
 * Connection status.
 */
export type ConnectionStatus = 'active' | 'inactive' | 'error' | 'testing';

/**
 * Schema for testing a connection.
 */
export type ConnectionTestRequest = {
    name: string;
    database_type: DatabaseType;
    host: string;
    port: number;
    database: string;
    username: string;
    password: string;
    db_schema?: (string | null);
    ssl_enabled?: boolean;
};

/**
 * Schema for connection test response.
 */
export type ConnectionTestResponse = {
    success: boolean;
    message: string;
};

/**
 * Schema for updating a connection.
 */
export type ConnectionUpdate = {
    name?: (string | null);
    database_type?: (DatabaseType | null);
    host?: (string | null);
    port?: (number | null);
    database?: (string | null);
    username?: (string | null);
    password?: (string | null);
    db_schema?: (string | null);
    ssl_enabled?: (boolean | null);
    status?: (ConnectionStatus | null);
};

/**
 * Supported database types.
 */
export type DatabaseType = 'postgresql' | 'mysql' | 'sqlite' | 'mssql' | 'oracle';

/**
 * Schema for discovered column response.
 */
export type DiscoveredColumnResponse = {
    id: number;
    table_id: number;
    column_name: string;
    data_type: string;
    is_nullable: boolean;
    is_primary_key: boolean;
    is_foreign_key: boolean;
    default_value?: (string | null);
    max_length?: (number | null);
    precision?: (number | null);
    scale?: (number | null);
    ordinal_position: number;
    created_at: string;
};

/**
 * Schema for discovered relation response.
 */
export type DiscoveredRelationResponse = {
    id: number;
    from_table_id: number;
    to_table_id: number;
    from_column_id: number;
    to_column_id: number;
    relation_type: string;
    constraint_name?: (string | null);
    on_delete: string;
    on_update: string;
    created_at: string;
};

/**
 * Schema for discovered table response.
 */
export type DiscoveredTableResponse = {
    id: number;
    connection_id: number;
    table_name: string;
    schema_name?: (string | null);
    table_type?: (string | null);
    row_count?: (number | null);
    comment?: (string | null);
    created_at: string;
    columns?: Array<DiscoveredColumnResponse>;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Schema for introspection request.
 */
export type IntrospectionRequest = {
    connection_id: number;
};

/**
 * Schema for introspection response.
 */
export type IntrospectionResponse = {
    success: boolean;
    message: string;
    tables_count: number;
    relations_count: number;
};

/**
 * Registration request schema.
 */
export type RegisterRequest = {
    email: string;
    password: string;
    full_name?: (string | null);
};

/**
 * Token response schema.
 */
export type Token = {
    access_token: string;
    token_type?: string;
};

/**
 * Schema for creating a user via API.
 */
export type UserCreateRequest = {
    email: string;
    password: string;
    full_name?: (string | null);
    is_superuser?: boolean;
};

/**
 * Schema for user response.
 */
export type UserResponse = {
    id: number;
    email: string;
    full_name?: (string | null);
    is_active: boolean;
    is_superuser: boolean;
    created_at: string;
    updated_at: string;
};

/**
 * Schema for users list response.
 */
export type UsersListResponse = {
    users: Array<UserResponse>;
    total: number;
};

/**
 * Schema for updating a user via API.
 */
export type UserUpdateRequest = {
    email?: (string | null);
    password?: (string | null);
    full_name?: (string | null);
    is_active?: (boolean | null);
    is_superuser?: (boolean | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type LoginApiV1AuthLoginPostData = {
    formData: Body_login_api_v1_auth_login_post;
};

export type LoginApiV1AuthLoginPostResponse = (Token);

export type RegisterApiV1AuthRegisterPostData = {
    requestBody: RegisterRequest;
};

export type RegisterApiV1AuthRegisterPostResponse = (UserResponse);

export type GetCurrentUserInfoApiV1AuthMeGetResponse = (UserResponse);

export type GetAllConnectionsApiV1ConnectionsGetResponse = (Array<ConnectionResponse>);

export type CreateConnectionApiV1ConnectionsPostData = {
    requestBody: ConnectionCreate;
};

export type CreateConnectionApiV1ConnectionsPostResponse = (ConnectionResponse);

export type GetConnectionApiV1ConnectionsConnectionIdGetData = {
    connectionId: number;
};

export type GetConnectionApiV1ConnectionsConnectionIdGetResponse = (ConnectionResponse);

export type UpdateConnectionApiV1ConnectionsConnectionIdPutData = {
    connectionId: number;
    requestBody: ConnectionUpdate;
};

export type UpdateConnectionApiV1ConnectionsConnectionIdPutResponse = (ConnectionResponse);

export type DeleteConnectionApiV1ConnectionsConnectionIdDeleteData = {
    connectionId: number;
};

export type DeleteConnectionApiV1ConnectionsConnectionIdDeleteResponse = (void);

export type TestConnectionApiV1ConnectionsTestPostData = {
    requestBody: ConnectionTestRequest;
};

export type TestConnectionApiV1ConnectionsTestPostResponse = (ConnectionTestResponse);

export type RootGetResponse = (unknown);

export type HealthHealthGetResponse = (unknown);

export type IntrospectDatabaseApiV1IntrospectionPostData = {
    requestBody: IntrospectionRequest;
};

export type IntrospectDatabaseApiV1IntrospectionPostResponse = (IntrospectionResponse);

export type GetTablesByConnectionApiV1IntrospectionConnectionsConnectionIdTablesGetData = {
    connectionId: number;
};

export type GetTablesByConnectionApiV1IntrospectionConnectionsConnectionIdTablesGetResponse = (Array<DiscoveredTableResponse>);

export type GetTableApiV1IntrospectionTablesTableIdGetData = {
    tableId: number;
};

export type GetTableApiV1IntrospectionTablesTableIdGetResponse = (DiscoveredTableResponse);

export type GetRelationsByConnectionApiV1IntrospectionConnectionsConnectionIdRelationsGetData = {
    connectionId: number;
};

export type GetRelationsByConnectionApiV1IntrospectionConnectionsConnectionIdRelationsGetResponse = (Array<DiscoveredRelationResponse>);

export type RefreshMetadataApiV1IntrospectionConnectionsConnectionIdRefreshPostData = {
    connectionId: number;
};

export type RefreshMetadataApiV1IntrospectionConnectionsConnectionIdRefreshPostResponse = (IntrospectionResponse);

export type DeleteMetadataApiV1IntrospectionConnectionsConnectionIdMetadataDeleteData = {
    connectionId: number;
};

export type DeleteMetadataApiV1IntrospectionConnectionsConnectionIdMetadataDeleteResponse = (void);

export type GetUsersApiV1UsersGetData = {
    limit?: number;
    skip?: number;
};

export type GetUsersApiV1UsersGetResponse = (UsersListResponse);

export type CreateUserApiV1UsersPostData = {
    requestBody: UserCreateRequest;
};

export type CreateUserApiV1UsersPostResponse = (UserResponse);

export type GetUserApiV1UsersUserIdGetData = {
    userId: number;
};

export type GetUserApiV1UsersUserIdGetResponse = (UserResponse);

export type UpdateUserApiV1UsersUserIdPutData = {
    requestBody: UserUpdateRequest;
    userId: number;
};

export type UpdateUserApiV1UsersUserIdPutResponse = (UserResponse);

export type DeleteUserApiV1UsersUserIdDeleteData = {
    userId: number;
};

export type DeleteUserApiV1UsersUserIdDeleteResponse = (void);