// This file is auto-generated by @hey-api/openapi-ts

export const Body_login_api_v1_auth_login_postSchema = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: '^password$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            format: 'password',
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login_api_v1_auth_login_post'
} as const;

export const ConnectionCreateSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Name'
        },
        database_type: {
            '$ref': '#/components/schemas/DatabaseType'
        },
        host: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Host'
        },
        port: {
            type: 'integer',
            exclusiveMaximum: 65536,
            exclusiveMinimum: 0,
            title: 'Port'
        },
        database: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Database'
        },
        username: {
            type: 'string',
            maxLength: 255,
            title: 'Username'
        },
        password: {
            type: 'string',
            maxLength: 500,
            title: 'Password'
        },
        db_schema: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Db Schema'
        },
        ssl_enabled: {
            type: 'boolean',
            title: 'Ssl Enabled',
            default: false
        }
    },
    type: 'object',
    required: ['name', 'database_type', 'host', 'port', 'database', 'username', 'password'],
    title: 'ConnectionCreate',
    description: 'Schema for creating a new connection.'
} as const;

export const ConnectionResponseSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        database_type: {
            '$ref': '#/components/schemas/DatabaseType'
        },
        host: {
            type: 'string',
            title: 'Host'
        },
        port: {
            type: 'integer',
            title: 'Port'
        },
        database: {
            type: 'string',
            title: 'Database'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        db_schema: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Db Schema'
        },
        ssl_enabled: {
            type: 'boolean',
            title: 'Ssl Enabled'
        },
        status: {
            '$ref': '#/components/schemas/ConnectionStatus'
        },
        last_introspection: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Introspection'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'name', 'database_type', 'host', 'port', 'database', 'username', 'ssl_enabled', 'status', 'created_at', 'updated_at'],
    title: 'ConnectionResponse',
    description: 'Schema for connection response.'
} as const;

export const ConnectionStatusSchema = {
    type: 'string',
    enum: ['active', 'inactive', 'error', 'testing'],
    title: 'ConnectionStatus',
    description: 'Connection status.'
} as const;

export const ConnectionTestRequestSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Name'
        },
        database_type: {
            '$ref': '#/components/schemas/DatabaseType'
        },
        host: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Host'
        },
        port: {
            type: 'integer',
            exclusiveMaximum: 65536,
            exclusiveMinimum: 0,
            title: 'Port'
        },
        database: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Database'
        },
        username: {
            type: 'string',
            maxLength: 255,
            title: 'Username'
        },
        password: {
            type: 'string',
            maxLength: 500,
            title: 'Password'
        },
        db_schema: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Db Schema'
        },
        ssl_enabled: {
            type: 'boolean',
            title: 'Ssl Enabled',
            default: false
        }
    },
    type: 'object',
    required: ['name', 'database_type', 'host', 'port', 'database', 'username', 'password'],
    title: 'ConnectionTestRequest',
    description: 'Schema for testing a connection.'
} as const;

export const ConnectionTestResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success', 'message'],
    title: 'ConnectionTestResponse',
    description: 'Schema for connection test response.'
} as const;

export const ConnectionUpdateSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        database_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DatabaseType'
                },
                {
                    type: 'null'
                }
            ]
        },
        host: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Host'
        },
        port: {
            anyOf: [
                {
                    type: 'integer',
                    exclusiveMaximum: 65536,
                    exclusiveMinimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Port'
        },
        database: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Database'
        },
        username: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Username'
        },
        password: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 500
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        },
        db_schema: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Db Schema'
        },
        ssl_enabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Ssl Enabled'
        },
        status: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ConnectionStatus'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'ConnectionUpdate',
    description: 'Schema for updating a connection.'
} as const;

export const DatabaseTypeSchema = {
    type: 'string',
    enum: ['postgresql', 'mysql', 'sqlite', 'mssql', 'oracle'],
    title: 'DatabaseType',
    description: 'Supported database types.'
} as const;

export const DiscoveredColumnResponseSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        table_id: {
            type: 'integer',
            title: 'Table Id'
        },
        column_name: {
            type: 'string',
            title: 'Column Name'
        },
        data_type: {
            type: 'string',
            title: 'Data Type'
        },
        is_nullable: {
            type: 'boolean',
            title: 'Is Nullable'
        },
        is_primary_key: {
            type: 'boolean',
            title: 'Is Primary Key'
        },
        is_foreign_key: {
            type: 'boolean',
            title: 'Is Foreign Key'
        },
        foreign_key_table: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Foreign Key Table'
        },
        foreign_key_column: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Foreign Key Column'
        },
        default_value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Default Value'
        },
        max_length: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Max Length'
        },
        precision: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Precision'
        },
        scale: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Scale'
        },
        ordinal_position: {
            type: 'integer',
            title: 'Ordinal Position'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        }
    },
    type: 'object',
    required: ['id', 'table_id', 'column_name', 'data_type', 'is_nullable', 'is_primary_key', 'is_foreign_key', 'ordinal_position', 'created_at'],
    title: 'DiscoveredColumnResponse',
    description: 'Schema for discovered column response.'
} as const;

export const DiscoveredRelationResponseSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        from_table_id: {
            type: 'integer',
            title: 'From Table Id'
        },
        to_table_id: {
            type: 'integer',
            title: 'To Table Id'
        },
        from_column_id: {
            type: 'integer',
            title: 'From Column Id'
        },
        to_column_id: {
            type: 'integer',
            title: 'To Column Id'
        },
        relation_type: {
            type: 'string',
            title: 'Relation Type'
        },
        constraint_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Constraint Name'
        },
        on_delete: {
            type: 'string',
            title: 'On Delete'
        },
        on_update: {
            type: 'string',
            title: 'On Update'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        }
    },
    type: 'object',
    required: ['id', 'from_table_id', 'to_table_id', 'from_column_id', 'to_column_id', 'relation_type', 'on_delete', 'on_update', 'created_at'],
    title: 'DiscoveredRelationResponse',
    description: 'Schema for discovered relation response.'
} as const;

export const DiscoveredTableResponseSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        connection_id: {
            type: 'integer',
            title: 'Connection Id'
        },
        table_name: {
            type: 'string',
            title: 'Table Name'
        },
        schema_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Schema Name'
        },
        table_type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Table Type'
        },
        row_count: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Row Count'
        },
        comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Comment'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        columns: {
            items: {
                '$ref': '#/components/schemas/DiscoveredColumnResponse'
            },
            type: 'array',
            title: 'Columns',
            default: []
        }
    },
    type: 'object',
    required: ['id', 'connection_id', 'table_name', 'created_at'],
    title: 'DiscoveredTableResponse',
    description: 'Schema for discovered table response.'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const IntrospectionRequestSchema = {
    properties: {
        connection_id: {
            type: 'integer',
            title: 'Connection Id'
        }
    },
    type: 'object',
    required: ['connection_id'],
    title: 'IntrospectionRequest',
    description: 'Schema for introspection request.'
} as const;

export const IntrospectionResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        message: {
            type: 'string',
            title: 'Message'
        },
        tables_count: {
            type: 'integer',
            title: 'Tables Count'
        },
        relations_count: {
            type: 'integer',
            title: 'Relations Count'
        }
    },
    type: 'object',
    required: ['success', 'message', 'tables_count', 'relations_count'],
    title: 'IntrospectionResponse',
    description: 'Schema for introspection response.'
} as const;

export const RegisterRequestSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'RegisterRequest',
    description: 'Registration request schema.'
} as const;

export const TokenSchema = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type',
            default: 'bearer'
        }
    },
    type: 'object',
    required: ['access_token'],
    title: 'Token',
    description: 'Token response schema.'
} as const;

export const UserCreateRequestSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            maxLength: 100,
            minLength: 8,
            title: 'Password'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserCreateRequest',
    description: 'Schema for creating a user via API.'
} as const;

export const UserResponseSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active'
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'email', 'is_active', 'is_superuser', 'created_at', 'updated_at'],
    title: 'UserResponse',
    description: 'Schema for user response.'
} as const;

export const UserUpdateRequestSchema = {
    properties: {
        email: {
            anyOf: [
                {
                    type: 'string',
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        password: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100,
                    minLength: 8
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        is_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Active'
        },
        is_superuser: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Superuser'
        }
    },
    type: 'object',
    title: 'UserUpdateRequest',
    description: 'Schema for updating a user via API.'
} as const;

export const UsersListResponseSchema = {
    properties: {
        users: {
            items: {
                '$ref': '#/components/schemas/UserResponse'
            },
            type: 'array',
            title: 'Users'
        },
        total: {
            type: 'integer',
            title: 'Total'
        }
    },
    type: 'object',
    required: ['users', 'total'],
    title: 'UsersListResponse',
    description: 'Schema for users list response.'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;